// raft.proto

syntax = "proto3";

package raft;

service RaftService {
    // AppendEntries RPC
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesReply) {}

    // RequestVote RPC
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteReply) {}

    rpc ServeClient(ServeClientArgs) returns (ServeClientReply) {}
}

// AppendEntries RPC messages
message AppendEntriesRequest {
    int32 term = 1;
    int32 leaderId = 2;
    int32 prevLogIndex = 3;
    int32 prevLogTerm = 4;
    repeated LogEntry entries = 5;
    int32 leaderCommit = 6;
    int32 leaseDuration = 7;
}

message AppendEntriesReply {
    int32 term = 1;
    bool success = 2;
    int32 conflictTerm = 3;
    int32 firstIndexOfConflictTerm = 4;
}

message LogEntry {
    int32 term = 1;
    string command = 2;
}

// RequestVote RPC messages
message RequestVoteRequest {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message RequestVoteReply {
    int32 term = 1;
    bool voteGranted = 2;
    int32 oldLeaderLeaseDuration = 3;
}

message ServeClientArgs {
  string Request = 1;
}

message ServeClientReply {
  string Data = 1;
  string LeaderID = 2;
  bool Success = 3;
}